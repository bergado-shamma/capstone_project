const pb = new PocketBase('YOUR_POCKETBASE_URL'); // <<< IMPORTANT: REPLACE THIS

const loadingDashboard = document.getElementById('loading-dashboard');
const errorDashboard = document.getElementById('error-dashboard');
const permissionErrorDashboard = document.getElementById('permission-error-dashboard');
const dashboardContent = document.getElementById('dashboard-content');
const totalUsersDashboard = document.getElementById('total-users-dashboard');
const totalEventsDashboard = document.getElementById('total-events-dashboard');
const pendingVerificationDashboard = document.getElementById('pending-verification-dashboard');
const usersByRoleChartCanvasDashboard = document.getElementById('usersByRoleChartDashboard');
const authButtonsDashboard = document.getElementById('auth-buttons-dashboard');
const logoutButton = document.getElementById('logout-button');

let usersByRoleChartInstanceDashboard; // To store Chart.js instance

// Helper function to display messages
function displayMessage(element, message, type) {
    element.textContent = message;
    element.classList.remove('hidden', 'success-message', 'error-message');
    if (type) {
        element.classList.add(`${type}-message`);
    }
}

async function loadDashboardData() {
    loadingDashboard.classList.remove('hidden');
    errorDashboard.classList.add('hidden');
    permissionErrorDashboard.classList.add('hidden');
    dashboardContent.classList.add('hidden');
    authButtonsDashboard.classList.add('hidden');

    // Check auth status for logout button
    if (pb.authStore.isValid) {
        logoutButton.classList.remove('hidden');
    } else {
        logoutButton.classList.add('hidden');
    }

    try {
        if (!pb.authStore.isValid) {
            loadingDashboard.classList.add('hidden');
            authButtonsDashboard.classList.remove('hidden');
            return;
        }

        const currentUserRole = pb.authStore.model.role;
        const isSuperAdmin = currentUserRole === 'super-admin';

        if (!isSuperAdmin) {
            loadingDashboard.classList.add('hidden');
            permissionErrorDashboard.classList.remove('hidden');
            authButtonsDashboard.classList.remove('hidden');
            return;
        }

        // --- Fetch Data for Dashboard ---
        const allUsers = await pb.collection('users').getFullList({
            // Assuming the listRule for users collection allows 'super-admin' to fetch all
        });
        const allEvents = await pb.collection('events').getFullList({
            // Assuming the listRule for events collection allows 'super-admin' to fetch all
        });

        // --- Populate Summary Cards ---
        totalUsersDashboard.textContent = allUsers.length;
        totalEventsDashboard.textContent = allEvents.length;
        pendingVerificationDashboard.textContent = allUsers.filter(user => !user.verified).length;

        // --- Prepare Data for Users by Role Chart ---
        const roles = ["super-admin", "property-admin", "facility-admin", "staff", "student"];
        const usersByRole = {};
        roles.forEach(role => usersByRole[role] = 0);
        allUsers.forEach(user => {
            if (user.role && usersByRole.hasOwnProperty(user.role)) {
                usersByRole[user.role]++;
            }
        });

        // --- Render Users by Role Chart ---
        if (usersByRoleChartInstanceDashboard) usersByRoleChartInstanceDashboard.destroy();

        usersByRoleChartInstanceDashboard = new Chart(usersByRoleChartCanvasDashboard, {
            type: 'doughnut',
            data: {
                labels: Object.keys(usersByRole),
                datasets: [{
                    data: Object.values(usersByRole),
                    backgroundColor: [
                        'rgba(128, 0, 0, 0.8)', // PUP Maroon (Superadmin)
                        'rgba(204, 51, 51, 0.8)', // Lighter Maroon (Property Admin)
                        'rgba(255, 102, 0, 0.8)', // Orange (Facility Admin)
                        'rgba(0, 102, 204, 0.8)', // Blue (Staff)
                        'rgba(102, 178, 255, 0.8)' // Light Blue (Student)
                    ],
                    borderColor: '#fff',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: false,
                    }
                }
            }
        });

        loadingDashboard.classList.add('hidden');
        dashboardContent.classList.remove('hidden');

    } catch (error) {
        console.error('Error loading dashboard data:', error);
        loadingDashboard.classList.add('hidden');
        displayMessage(errorDashboard, `Failed to load dashboard data: ${error.message || 'Unknown error'}. Please ensure your PocketBase rules allow superadmins to view all users and events.`, 'error');
        authButtonsDashboard.classList.remove('hidden');
    }
}

// Logout functionality
logoutButton.addEventListener('click', () => {
    pb.authStore.clear();
    window.location.href = 'login.html'; // Redirect to your login page
});

// Load dashboard data on page load
document.addEventListener('DOMContentLoaded', loadDashboardData);

// Listen for auth changes (e.g., if user logs out on another tab)
pb.authStore.onChange(() => {
    if (!pb.authStore.isValid || pb.authStore.model.role !== 'super-admin') {
        window.location.href = 'login.html'; // Redirect if not a valid superadmin
    }
});